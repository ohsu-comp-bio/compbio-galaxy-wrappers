<tool id="sample_metrics" name="Sample Level Metrics" version="0.9.2" >
  <description>Metrics calculated at the sample level, for use in CGD and for additional QC.</description>

  <requirements>
    <requirement type="package" version="1.9">samtools</requirement>
    <requirement type="package" version="0.13.3">vcfpy</requirement>
  </requirements>

  <version_command>python $__tool_directory__/sample_metrics.py --version</version_command>

  <command><![CDATA[
    python3 $__tool_directory__/sample_metrics.py
    #if $probeqc
      --probeqc_after '${probeqc}'
    #end if
    #if $umi.umi_sel == 'umi_yes':
      --probeqc_before '${probeqc_before_umi}'
      --picard_summary_umi '${picard_metrics_umi}'
    #end if
    #if $picard_metrics
      --picard_summary '${picard_metrics}'
    #end if
    #if $gatk_depth_cov_prop
      --gatk_depth_cov_prop '${gatk_depth_cov_prop}'
    #end if
    #if $gatk_depth_cov_cnts
      --gatk_depth_cov_cnts '${gatk_depth_cov_cnts}'
    #end if
    --outfile '${output}'
    --outfile_txt '${output_txt}'
    #if $fastqc_one:
        --fastqc_r1 '${fastqc_one}'
    #end if
    #if $fastqc_two:
        --fastqc_r2 '${fastqc_two}'
    #end if
    #if $primers_bed:
        --primers_bed '${primers_bed}'
    #end if
    #if $primers_bam:
        --primers_bam '${primers_bam}'
    #end if
    #if $msi:
        --msi '${msi}'
    #end if
    #if $gatk_count_reads_total:
        --gatk_count_reads_total '${gatk_count_reads_total}'
    #end if
    #if $gatk_count_reads_ints:
        --gatk_count_reads_ints '${gatk_count_reads_ints}'
    #end if
    #if $gatk_coll_rnaseq_mets
        --gatk_coll_rnaseq_mets '${gatk_coll_rnaseq_mets}'
    #end if
    #if $blia_pre
        --blia_pre '${blia_pre}'
    #end if
    #if $blia_post
        --blia_post '${blia_post}'
    #end if
    #if $dragen_metrics:
        --dragen_metrics '${dragen_metrics}'
    #end if
    #if $dragen_qc:
        --dragen_qc '${dragen_qc}'
    #end if
    #if $json_in:
        --json_in
        #for $input in $json_in:
            #if $input:
                "${input}"
            #end if
        #end for
    #end if
    #if $workflow:
        --workflow '${workflow}'
    #end if
]]></command>

  <inputs>
      <param name="probeqc" type="data" format="txt" optional="true" label="ProbeQC Metrics" help="ProbeQC metrics file, as produced by the intervalqc_v2 script.  If you intend on producing UMI metrics, this would be the coverage QC AFTER UMI deduplication." />
      <param name="picard_metrics" type="data" format="txt" optional="true" label="Picard Alignment Summary Metrics" help="Alignment summary metrics produced by the Picard CollectAlignmentSummaryMetrics tool." />
      <param name="gatk_depth_cov_prop" type="data" format="txt" optional="true" label="GATK4 Depth Of Coverage sample file" help="GATK4 Depth Of Coverage sample file" />
      <param name="gatk_depth_cov_cnts" type="data" format="txt" optional="true" label="GATK4 Depth Of Coverage locus file" help="GATK4 Depth Of Coverage locus file" />
      <param name="primers_bed" type="data" format="bed" optional="true" label="Primers BED" help="BED file containing primer coordinates only." />
      <param name="primers_bam" type="data" format="bam" optional="true" label="Primers BAM" help="BAM file to calculate primer reads on target." />
      <param name="fastqc_one" type="data" format="txt" optional="true" label="FastQC R1" help="FastQC text stats for R1 reads." />
      <param name="fastqc_two" type="data" format="txt" optional="true" label="FastQC R2" help="FastQC text stats for R2 reads." />
      <param name="gatk_count_reads_total" type="data" format="txt" optional="true" label="GATK4 CountReads Total" help="Total counts resulting from CountReads on a BAM file." />
      <param name="gatk_count_reads_ints" type="data" format="txt" optional="true" label="GATK4 CountReads Intervals" help="Target interval counts resulting from CountReads on a BAM file." />
      <param name="gatk_coll_rnaseq_mets" type="data" format="tabular" optional="true" label="GATK4 CollectRNASeqMetrics Text" help="Tab-delimited metrics file coming from GATK CollectRNASeqMetrics." />
      <param name="msi" type="data" format="tabular" optional="true" label="MSIsensor TSV" help="TSV file with MSI results." />
      <param name="blia_pre" type="data" format="txt" optional="true" label="BLIA BLIS Pre" help="JSON metrics from BLIA BLIA subtyping pre-normalization." />
      <param name="blia_post" type="data" format="txt" optional="true" label="BLIA BLIS Post" help="JSON metrics from BLIA BLIA subtyping post-normalization." />
      <param name="json_in" type="data" format="txt" optional="true" multiple="true" label="JSON Formatted Metrics File" help="Some arbitrary number of input files containing json formatted metrics." />
      <param name="dragen_metrics" type="data" format="txt" optional="true" label="DRAGEN JSON Formatted Metrics File" help="JSON formatted metrics file produced by DRAGEN." />
      <param name="dragen_qc" type="data" format="csv" optional="true" label="DRAGEN QC CSV" help="CSV file with QC data produced by DRAGEN." />
      <conditional name="umi">
          <param label="Assess UMI deduplication" name="umi_sel" type="select">
              <option value="umi_yes">Yes</option>
              <option value="umi_no">No</option>
          </param>
          <when value="umi_yes">
              <param name="probeqc_before_umi" type="data" format="txt" label="ProbeQC Metrics Pre-UMI" truevalue="--probeqc_before" help="ProbeQC metrics file produced before any UMI deduplication takes place.  Optional." />
              <param name="picard_metrics_umi" type="data" format="txt" label="Picard Alignment Summary Metrics Post UMI Dedup" help="Alignment summary metrics produced by the Picard CollectAlignmentSummaryMetrics tool taken after UMI deduplication." />
          </when>
      </conditional>
      <param name="workflow" type="text" label="Workflow Name" optional="true" help="Name of the workflow that is being run." />
  </inputs>
  <outputs>
    <data format="txt" name="output" label="${tool.name} on ${on_string}: json" />
    <data format="txt" name="output_txt" label="${tool.name} on ${on_string}: txt" />
  </outputs>

  <help><![CDATA[
usage: sample_metrics.py [-h] [--probeqc_after PROBEQC_AFTER]
                         [--probeqc_before PROBEQC_BEFORE]
                         [--fastqc_r1 FASTQC_R1] [--fastqc_r2 FASTQC_R2]
                         [--picard_summary PICARD_SUMMARY]
                         [--picard_summary_umi PICARD_SUMMARY_UMI]
                         [--gatk_depth_cov_prop GATK_DEPTH_COV_PROP]
                         [--gatk_depth_cov_cnts GATK_DEPTH_COV_CNTS]
                         [--gatk_coll_rnaseq_mets GATK_COLL_RNASEQ_METS]
                         [--gatk_count_reads_total GATK_COUNT_READS_TOTAL]
                         [--gatk_count_reads_ints GATK_COUNT_READS_INTS]
                         [--msi MSI] [--primers_bam PRIMERS_BAM]
                         [--primers_bed PRIMERS_BED] [--blia_pre BLIA_PRE]
                         [--blia_post BLIA_POST]
                         [--dragen_metrics DRAGEN_METRICS]
                         [--dragen_qc DRAGEN_QC]
                         [--json_in [JSON_IN [JSON_IN ...]]]
                         [--outfile OUTFILE] [--outfile_txt OUTFILE_TXT]
                         [--workflow WORKFLOW] [--version]

optional arguments:
  -h, --help            show this help message and exit
  --probeqc_after PROBEQC_AFTER
                        Probe coverage QC after UMI deduplication metrics.
  --probeqc_before PROBEQC_BEFORE
                        Probe coverage QC before UMI deduplication metrics.
  --fastqc_r1 FASTQC_R1
                        FastQC stats for read 1.
  --fastqc_r2 FASTQC_R2
                        FastQC stats for read 2.
  --picard_summary PICARD_SUMMARY
                        Picard alignment summary metrics file.
  --picard_summary_umi PICARD_SUMMARY_UMI
                        Picard alignment summary metrics file taken after umi
                        deduplication.
  --gatk_depth_cov_prop GATK_DEPTH_COV_PROP
                        GATK DepthOfCoverage file.
  --gatk_depth_cov_cnts GATK_DEPTH_COV_CNTS
                        GATK DepthOfCoverage locus file.
  --gatk_coll_rnaseq_mets GATK_COLL_RNASEQ_METS
                        GATK CollectRnaSeqMetrics file.
  --gatk_count_reads_total GATK_COUNT_READS_TOTAL
                        Output from GATK4 CountReads with total read count.
  --gatk_count_reads_ints GATK_COUNT_READS_INTS
                        Output from GATK4 CountReads with read count for reads
                        overlapping targets.
  --msi MSI             TSV file containing MSI results
  --primers_bam PRIMERS_BAM
                        BAM file to calculate primer reads on target.
  --primers_bed PRIMERS_BED
                        BED file containing primer coordinates only.
  --blia_pre BLIA_PRE   JSON from Ding correlation subtyping, pre-
                        normalization.
  --blia_post BLIA_POST
                        JSON from Ding correlation subtyping, post-
                        normalization.
  --dragen_metrics DRAGEN_METRICS
                        JSON file containing metrics produced by DRAGEN
  --dragen_qc DRAGEN_QC
                        CSV file containing fastqc data produced by DRAGEN
  --json_in [JSON_IN [JSON_IN ...]]
                        Arbitrary number of files to be included in sample
                        metrics that are in json format.
  --outfile OUTFILE     Output file with json string.
  --outfile_txt OUTFILE_TXT
                        Output file in human readable text format.
  --workflow WORKFLOW   Pass the Galaxy workflow name, if applicable.
  --version             show program's version number and exit
  ]]></help>
</tool>
