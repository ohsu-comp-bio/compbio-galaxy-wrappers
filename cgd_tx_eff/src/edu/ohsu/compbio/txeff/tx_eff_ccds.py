'''
Created on Aug. 24, 2022

@author: pleyte
'''

from _collections import defaultdict
import csv
import logging

from edu.ohsu.compbio.txeff.variant_transcript import VariantTranscript


class TxEffCcds(object):
    '''
    This class adds CCDS accessions to the transcript effects 
    '''
    def __init__(self, refseq_to_ccds_file):
        '''
        refseq_to_ccds_file is the path to a file that contains mappings from RefSeq id to CCDS id. The file can either 
        be the NCBI GFF (eg https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh37_latest/refseq_identifiers/GRCh37_latest_genomic.gff.gz) 
        or the csv file generated by ``tx_eff_csv.py``  
        '''
        # Save the filename for later 
        self.refseq_to_ccds_file = refseq_to_ccds_file
        
        # Set up a logger for this class
        self.logger = logging.getLogger(__name__)

    def _get_refseq_to_ccds_mappings(self):
        '''
        Return a dictionary of RefSeq id to CCDS id. The mappings are read from a CSV file that was created by 
        the script: https://github.com/ohsu-comp-bio/kdl-tools/tree/master/cgd_prep/src/edu/ohsu/compbio/etl/refseq_ccds.py
        '''
        refseq_ccds_map = defaultdict()
        
        with open(self.refseq_to_ccds_file) as csv_file:
            reader = csv.DictReader(csv_file)
            for row in reader:
                if refseq_ccds_map.get(row['refseq_id']) is not None:
                    raise Exception(f"RefSeq id {row['refseq_id']} is already mapped to {refseq_ccds_map.get(row['refseq_id'])}. Cannot add additional mapping to {row['ccds_id']}")
                
                refseq_ccds_map[row['refseq_id']] = row['ccds_id']
        
        self.logger.info(f"Created RefSeq-CCDS map of size {len(refseq_ccds_map)} from CSV")
        
        return refseq_ccds_map

    def get_ccds_transcripts(self, refseq_transcripts: list):
        """
        For every RefSeq transcript associated with a variant, make a copy of the variant and change the accession to the CCDS that the RefSeq is mapped to. 
        """
        # Load the refseq to CCDS map from file        
        refseq_to_ccds_mappings = self._get_refseq_to_ccds_mappings()        
        if(len(refseq_to_ccds_mappings) == 0): 
            raise Exception(f"No mappings found in input file {self.refseq_to_ccds_file}") 

        ccds_to_refseqs = defaultdict(list)
        
        for transcript in refseq_transcripts:
            refseq_id = transcript.refseq_transcript
            ccds_id = refseq_to_ccds_mappings.get(refseq_id)

            if ccds_id:
                # Key is a tuple formed from variant genotype and ccds accession  
                key = (f"{transcript.chromosome}-{transcript.position}-{transcript.reference}-{transcript.alt}", ccds_id)
                existing_refseq_transcript = ccds_to_refseqs[key]
                
                if existing_refseq_transcript:
                    preferred_refseq_transcript = self._get_preferred_refseq_transcript(transcript, existing_refseq_transcript)
                    ccds_to_refseqs[key] = preferred_refseq_transcript
                    self.logger.debug(f'RefSeq {transcript.refseq_transcript} and {existing_refseq_transcript.refseq_transcript} both map to {ccds_id}. {preferred_refseq_transcript.refseq_transcript} is preferred.')
                else:
                    ccds_to_refseqs[key] = transcript
                
        ccds_transcripts = []

        for key, refseq_transcript in ccds_to_refseqs.items():
            ccds_transcripts.append(self.get_ccds_from_refseq(key[1], refseq_transcript))
            
        return ccds_transcripts 
                    
    def get_ccds_from_refseq(self, ccds_accession, refseq_transcript):
        """
        Take a RefSeq transcript, make a copy, and change the accession from a RefSeq to a CCDS.
        """
        ccds_transcript = refseq_transcript.get_copy()
        ccds_transcript.refseq_transcript = ccds_accession
        return ccds_transcript
        
    def _get_preferred_refseq_transcript(self, transcript0: VariantTranscript, transcript1: VariantTranscript):
        '''
        When a CCDS transcript is mapped to multiple RefSeq transcripts then we need to choose just one RefSeq. (eg NM_111.4 is preferred to NM_222.5).
        1. If the accessions are the same but with different versions then choose the one with the latest version.
            - This shouldn't happen because tx_eff_hgvs._get_the_best_transcripts should take care of it
        2. If the accession are different then choose the oldest one because it is assumed to be the most curated.   
        ''' 
        if(not transcript0.refseq_transcript.startswith('NM_') or not transcript1.refseq_transcript.startswith('NM_')):
            raise ValueError(f'Both transcripts should have a RefSeq accession starting with "NM_": {transcript0.refseq_transcript}, {transcript1.refseq_transcript}')

        # This shouldn't happen because when tx_eff_hgvs sees transcripts that have the sqme RefSeq accession but different versions, it picks one.           
        if transcript0.refseq_transcript == transcript1.refseq_transcript:
            raise ValueError(f"Unable to choose between two transcripts with the same RefSeq accession: {transcript0} and {transcript1}")
        
        t0_accession, t0_version = map(int, transcript0.refseq_transcript.replace('NM_', '').split('.'))
        t1_accession, t1_version = map(int, transcript1.refseq_transcript.replace('NM_', '').split('.'))

        if(t0_accession == t1_accession):
            if(t0_version > t1_version):
                return transcript0
            else:
                return transcript1
        elif(t0_accession < t1_accession):
            return transcript0
        else:
            return transcript1
