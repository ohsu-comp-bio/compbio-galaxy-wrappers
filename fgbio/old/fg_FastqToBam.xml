<tool id="fg_FastqToBam" name="Fastq To Bam" version="@WRAPPER_VERSION@">
  <description>Generates an unmapped BAM (or SAM or CRAM) file from fastq files.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
    @CMD_BEGIN@ FastqToBam
    #include source=$fastq_and_read_structures_cmd#
    #include source=$sample_cmd#
    #include source=$library_cmd#
    #include source=$sort_boolean_cmd#
    #include source=$umi_tag_cmd#
    #include source=$header_read_group_id_cmd#
    #include source=$platform_cmd#
    #include source=$platform_unit_cmd#
    #include source=$platform_model_cmd#
    #include source=$sequencing_center_cmd#
    #include source=$predicted_insert_size_cmd#
    #include source=$description_cmd#
    #include source=$comment_cmd#
    #include source=$run_date_cmd#
    #include source=$log_cmd# &&
    rm input*.fastq
    ]]>
  </command>
  <inputs>
    <expand macro="fastq_and_read_structures_input"/>
    <expand macro="sample_input"/>
    <expand macro="library_input"/>
    <expand macro="sort_boolean_input"/>
    <expand macro="umi_tag_input"/>
    <expand macro="header_read_group_id_input"/>
    <expand macro="platform_input"/>
    <expand macro="platform_unit_input"/>
    <expand macro="platform_model_input"/>
    <expand macro="sequencing_center_input"/>
    <expand macro="predicted_insert_size_input"/>
    <expand macro="description_input"/>
    <expand macro="comment_input"/>
    <expand macro="run_date_input"/>
  </inputs>
  <outputs>
    <expand macro="bam_output"/>
    <expand macro="log_output"/>
  </outputs>
  <help><![CDATA[

Generates an unmapped BAM (or SAM or CRAM) file from fastq files. Takes in one or more fastq files (optionally gzipped), each representing a different sequencing read (e.g. R1, R2, I1 or I2) and can use a set of read structures to allocate bases in those reads to template reads, sample indices, unique molecular indices, or to designate bases to be skipped over.

Read structures are made up of <number><operator> pairs much like the CIGAR string in BAM files. Four kinds of operators are recognized:

T identifies a template read
B identifies a sample barcode read
M identifies a unique molecular index read
S identifies a set of bases that should be skipped or ignored
The last <number><operator> pair may be specified using a + sign instead of number to denote “all remaining bases”. This is useful if, e.g., fastqs have been trimmed and contain reads of varying length. For example to convert a paired-end run with an index read and where the first 5 bases of R1 are a UMI and the second five bases are monotemplate you might specify:

--input r1.fq r2.fq i1.fq --read-structures 5M5S+T +T +B
Alternative if you know your reads are of fixed length you could specify:

--input r1.fq r2.fq i1.fq --read-structures 5M5S65T 75T 8B
For more information on read structures see the Read Structure Wiki Page

The same number of input files and read structures must be provided, with one exception: if supplying exactly 1 or 2 fastq files, both of which are solely template reads, no read structures need be provided.

The output file can be sorted by queryname using the --sort-order option; the default is to produce a BAM with reads in the same order as they appear in the fastq file.



]]>  
  </help>
  
</tool>